{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.1",
    "title": "Swagger SoYummy",
    "description": "This is a sample Cooking Book Server based on the OpenAPI 3.0 specification. \n\n\nSome useful links:\n- [The SoYummy FrontEnd repository](https://github.com/NatashaFedorova/so-yummy),\n- [The SoYummy BackEnd repository](https://github.com/stan-nikola/t2d-SoYammy-backEnd)"
  },
  "externalDocs": {
    "description": "Live page The SoYummy  App",
    "url": "https://natashafedorova.github.io/so-yummy/"
  },
  "servers": [
    {
      "url": "https://t2d-soyammy-backend.onrender.com/api"
    }
  ],

  "consumers": ["application/json", "multipart/form-data"],
  "produces": ["application/json", "multipart/form-data"],
  "tags": [
    {
      "name": "auth",
      "description": "User Authorization"
    },
    {
      "name": "user",
      "description": "Operations about user"
    },

    {
      "name": "recipes",
      "description": "Access to recipe"
    },
    {
      "name": "ownrecipes",
      "description": "Access to recipe"
    },
    {
      "name": "ingredient",
      "description": "Access to ingredient"
    }
  ],
  "paths": {
    "/ingredients/list": {
      "get": {
        "tags": ["ingredient"],
        "summary": "Returns all ingredients",
        "description": "Returns array of object with ingredient data",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ingredients": {
      "get": {
        "tags": ["ingredient"],
        "summary": "Get recipe by ingredient name ",
        "description": "\n\n\nExtras:\n- Example: ingredients?query=cucumber&page=1&limit=3 \n- added the totalCount field to each object, which shows the total number of objects in the collection upon request",

        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "The ingredient name for search",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Returns 12 objects per page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page limit max 12 objects",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",

            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Recipe with {query} not found, try find with another ingredient"
          }
        }
      }
    },
    "/ownrecipes": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["ownrecipes"],
        "summary": "Add own recipe",
        "description": "",
        "consumes": ["multipart/form-data"],

        "parameters": [
          {
            "name": "recipeImage",
            "in": "formData",
            "description": "Recipe image",
            "schema": { "type": "file" }
          },
          {
            "name": "title",
            "in": "formData",
            "description": "Recipe title",
            "required": true,
            "type": "string",
            "example": "Fried eggplant"
          },
          {
            "name": "category",
            "in": "formData",
            "description": "Recipe category",
            "required": true,
            "type": "string",
            "example": "Starter"
          },
          {
            "name": "area",
            "in": "formData",
            "description": "Recipe area",
            "required": true,
            "type": "string",
            "example": "Ukraine"
          },
          {
            "name": "instructions",
            "in": "formData",
            "description": "Recipe instructions",
            "required": true,
            "type": "string",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "Recipe area",
            "required": true,
            "type": "string",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor"
          },
          {
            "name": "time",
            "in": "formData",
            "description": "Recipe preparing time",
            "required": true,
            "type": "string",
            "example": "30"
          },
          {
            "name": "tags",
            "in": "formData",
            "description": "Recipe tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "pasta,baking"
              }
            }
          },
          {
            "name": "ingredients",
            "in": "formData",
            "description": "Recipe ingredients",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "example": {
                  "id": "640c2dd963a319ea671e376c",
                  "measure": "3/4 cup"
                }
              }
            }
          }
        ],

        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "petId": {
            "type": "integer",
            "format": "int64",
            "example": 198772
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 7
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "example": "approved",
            "enum": ["placed", "approved", "delivered"]
          },
          "complete": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "order"
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 100000
          },
          "username": {
            "type": "string",
            "example": "fehguy"
          },
          "address": {
            "type": "array",
            "xml": {
              "name": "addresses",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        },
        "xml": {
          "name": "customer"
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "example": "437 Lytton"
          },
          "city": {
            "type": "string",
            "example": "Palo Alto"
          },
          "state": {
            "type": "string",
            "example": "CA"
          },
          "zip": {
            "type": "string",
            "example": "94301"
          }
        },
        "xml": {
          "name": "address"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Dogs"
          }
        },
        "xml": {
          "name": "category"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "James"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          },
          "phone": {
            "type": "string",
            "example": "12345"
          },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32",
            "example": 1
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "tag"
        }
      },
      "Pet": {
        "required": ["name", "photoUrls"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl"
              }
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": ["available", "pending", "sold"]
          }
        },
        "xml": {
          "name": "pet"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "xml": {
          "name": "##default"
        }
      }
    },
    "requestBodies": {
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
